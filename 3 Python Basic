# 3: Python Basic

Review: No

# Learning Python

- **Terms** (different words and different definitions): statements, variables, instantiation 例示
- **Data Types:** What sort of data can the program hold? Think of the way as values like numbers, letters and symbols.
- **Actions:** run the code to perform the actions
- **Practice**

# Python Data Types

### Fundamental Data Types

- int
- float
- bool
- str
- list
- tuple
- set
- dict

### Classes → custom data types

### Specialized Data Types → modules

- None

# Numbers

- **int (integer)** = number —> 2,3,4
- **float (**floating point number) —> a number with a decimal number —> 0.5, 0.8

> **print - 輸出（執行）
type - 辨識何種value
＊＊(power of) - 次方
/ / (double divide) - rounded down to a integer，取整數
％ (modulo) - return the reminder 餘數. 13=2*5+3 —> 13%5 = 3. Good for deciding if number is even or odd**
> 

![(like the mathematics, calculate from the () —>(4/5)=0.8 —> type(0.8) = float —> print it](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled.png)

(like the mathematics, calculate from the () —>(4/5)=0.8 —> type(0.8) = float —> print it

<aside>
💡 **Why we need to use two values to indicate the number with/without the decimal point?**
—> We need to store the number and it’s stored as binary numbers and we need more memory to store the floating numbers which with two locations (0.8) than

</aside>

[15. Floating Point Arithmetic: Issues and Limitations - Python 3.11.0 documentation](https://docs.python.org/3/tutorial/floatingpoint.html)

![As the calculation results in 11.0, the type indicated as ‘float’](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%201.png)

As the calculation results in 11.0, the type indicated as ‘float’

![Untitled](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%202.png)

![Untitled](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%203.png)

# Math Functions

> **round -** Round a number to a given precision in decimal digits. **四捨五入
abs** - Return the absolute value of the argument. **轉為絕對值**
> 

![Untitled](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%204.png)

[Python Mathematical Functions](https://www.programiz.com/python-programming/modules/math)

# DEVELOPER FUNDAMENTALS: I

- Don’t read the dictionary
- You will automatically get to know the functions/… if it’s truly important.

# Operator Precedence 運算順序

- the concept where system decides which operation should be performed first according to precedence ( priority) of operator.
- （ ）
- ＊＊
- ＊/
- + -

# Optional: bin() and complex

- **bin** - Return the binary representation of an integer.
- **int -** Return an integer representation of the binary.

![截圖 2022-12-20 上午12.38.15.png](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/%25E6%2588%25AA%25E5%259C%2596_2022-12-20_%25E4%25B8%258A%25E5%258D%258812.38.15.png)

# Variables

> Ways for us to store information on our computer，we assign the value to the variable to bind them together, once the system remember it, you can recall the value
> 

### Rule

- snake_case: all lowercase with underscores **小寫與底線組成**
- Start with lowercase or underscore **小寫或底線作為開頭**
- Case sensitive **大小寫有別**
- Don’t overwrite keywords **不要用keywords (ex: print, type) 為變數命名**

![Untitled](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%205.png)

# Expressions vs Statements

- expressions - a piece of code that produces a value
- statement - the entire line of code

# Augmented Assignment Operator **增量賦值**

> **增量賦值**
(Augmented assignment)或稱**複合賦值**(compound assignment)是在一些[程式語言](https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80)中的一類[賦值](https://zh.wikipedia.org/wiki/%E8%B5%8B%E5%80%BC%E8%AF%AD%E5%8F%A5)[運算符](https://zh.wikipedia.org/wiki/%E7%AE%97%E5%AD%90_(%E7%B7%A8%E7%A8%8B))。通常用於替代一條語句，其中的運算符把[變量](https://zh.wikipedia.org/wiki/%E5%8F%98%E9%87%8F)作為一個[運算數](https://zh.wikipedia.org/wiki/%E9%81%8B%E7%AE%97%E6%95%B8)，再把結果賦值給同一變量。例如`x += 1`可展開為`x = x + (1)`
You can use -=, +=, /=, *=
> 

![Untitled](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%206.png)

# String 字元

- **str(string)** = a piece of text
- you can use ‘ ‘ or ‘’ ‘’
- ‘’’ is for long strings

![Untitled](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%207.png)

### String Concatenation

> adding string together
> 

# Type Conversion

> Convert the type of the values using int( ), str( )
> 

![Untitled](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%208.png)

# Escape Sequences 跳脫序列

> Scenario: if you want to type a ‘ (it’s) or ‘’ (’’kind of’’) you can use \ to let the system know whatever after a \, it’s a string
跳脫是當由於技術等原因、無法直接在代碼中寫出所要的字元時採用的，以多個字元的有序組合來表示原本需要的字元的手段
> 
- **\**  | whatever after this is a string
- **\ t** | add a tab
- **\ n** | add a new line

![Untitled](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%209.png)

# Formatted Strings 格式化字符串

> 把字串中的變數替換成變數值
> 

[如何使用 Python 進行字串格式化](https://blog.techbridge.cc/2019/05/03/how-to-use-python-string-format-method/)

[文字與字串 ( 格式化 ) - Python 教學 | STEAM 教育學習網](https://steam.oxxostudio.tw/category/python/basic/format.html)

### 1. **舊式字串格式化**

使用 `%`運算子來進行字串格式化，告訴 Python 直譯器要在那邊替換文字 text 並使用字串呈現。這就是所謂的舊式字串格式化（%s 是以字串輸出，%f 是以浮點數輸出、%d 是以十進位整數輸出）

- *一般用法*
    
    ![Untitled](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%2010.png)
    
- *如果有多個變數*
    
    ![字串要加‘’](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%2011.png)
    
    字串要加‘’
    

### 2. ****新式字串格式化（format()）*`格式化字串.format(資料)`***

使用 `format()`函式來讓字串格式化，其功能和舊式格式化相差無幾，但主要是捨去 `%`讓字串格式化使用上可以更加正常、規律，可讀性也相對提升。

- *一般用法*
    
    ![Untitled](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%2012.png)
    
- *使用名稱來指定變數變換順序*
    
    ![Untitled](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%2013.png)
    
- *將兩個字串，分別插入字串中的兩個 {}。*
    
    ![Untitled](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%2014.png)
    
- *{} 裡可以填入數字，數字表示「填入資料的順序」*
    
    ![Untitled](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%2015.png)
    

### 3. ****字串插值（Formatted String Literal）*`f{變數名稱或運算式}`***

把 Python 運算式嵌入在字串常數中

- 一般用法
    
    ![Untitled](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%2016.png)
    
- 多個變數
    
    ![Untitled](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%2017.png)
    

# String Indexes 格式化字符串

> Strings in python are stored as sequences of letters in memory. 1 by 1 with order and you can access different part of a string
> 

![Untitled](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%2018.png)

![Untitled](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%2019.png)

- **[start : stop]** Using the “:” to index the start and stop place，處理數到數的後面一位
    
    ![We stop at place “3” means we don't want whatever place 3 is](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%2020.png)
    
    We stop at place “3” means we don't want whatever place 3 is
    
- **[start : stop : stepover ]** Using the “:” to index the number to step over，隔幾個數取
    
    ![Steps over by 1：隔一個數取](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%2021.png)
    
    Steps over by 1：隔一個數取
    
    ![Starts from 0, stops at 6, steps over by 2：從0開始、6結束、隔兩位取](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%2022.png)
    
    Starts from 0, stops at 6, steps over by 2：從0開始、6結束、隔兩位取
    
    ![沒有指明就是default，從頭、到尾、隔一取數](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%2023.png)
    
    沒有指明就是default，從頭、到尾、隔一取數
    
    ![The negative index means start at the end of the string ](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%2024.png)
    
    The negative index means start at the end of the string 
    
    ![從最後面隔一取數](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%2025.png)
    
    從最後面隔一取數
    

# Immutability

> Once the string is signed, it cannot be changed. If you want to change it, you can reassign the new string
> 

![Untitled](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%2026.png)

# Built-In Functions + Methods

[Built-in Functions](https://docs.python.org/3/library/functions.html)

- **len (length) - 辨別長度**
    
    ![Untitled](3%20Python%20Basic%2024863f101f854c6b9ed4cb5ced96c100/Untitled%2027.png)
